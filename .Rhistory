## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[getinverse]]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[get]]()
m <- solve(data, ...)
x[[setinverse]](m)
m
}
cacheSolve(a)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]()
m <- solve(data, ...)
x["setinverse"](m)
m
}
cacheSOlve(a)
cacheSolve(a)
is.null(a)
!is.null(a)
m<-x["getinverse"]()
m<-a["getinverse"]()
m<-a$getinverse()
m<-getinverse(a)
getinverse<-function()m
getinverse<-function()a
getinverse
getinverse()
m<-null
m<-NULL
getmean<-function() m
getmean(m)
getmean
getmean()
x<-[1:4}]
x<-[1:4]
x$getmean()
x <- [1:4]
x <- c[1:4]
x <- c(1:4)
x
x$getmean()
x["getmean"]()
x<-2
x
x$getmean()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<-matrix[1:4,ncol=2,nrow=2]
x<-matrix(1:4,ncol=2,nrow=2)
x
makeCacheMatrix(x)
x$get
class(x)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[$getinverse]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[$get]()
m <- solve(data, ...)
x[$setinverse](m)
m
}
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x["$getinverse"]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["$get"]()
m <- solve(data, ...)
x["$setinverse"](m)
m
}
makeCacheMatrix(x)
cacheSolve(x)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
makeCacheMatrix(x)
cacheSolve(x)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[getinverse]]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[get]]()
m <- solve(data)
x[[setinverse]](m)
m
}
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[getinverse]]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[get]]()
m <- solve(data)
x[[setinverse]](m)
m
}
makeCacheMatrix(x)
cacheSolve(x)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[$getinverse]]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[$get]]()
m <- solve(data)
x[[$setinverse]](m)
m
}
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[["getinverse"]]()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[["get"]]()
m <- solve(data)
x[["setinverse"]](m)
m
}
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(inverse) {
m <<- inverse
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(x)
cacheSolve(x)
x$cacheSolve()
a<-makeCacheMatrix(x)
a$cacheSolve
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x
solve(x)
a<-makeCacheMatrix(x)
a$cacheSolve
cacheSolve(a)
## a pair of functions that cache the inverse of a matrix
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setinverse <- function(solve) {
m <<- solve
}
getinverse <- function() {
m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x<-matrix(2:5,nrow=2,ncol=2)
cacheSolve(makeCacheMatrix(x))
solve(x)
